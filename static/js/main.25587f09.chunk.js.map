{"version":3,"sources":["components/Header.js","components/PokeCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","PokeCard","pokemon","style","key","id","name","height","weight","src","sprites","App","state","pokemons","pokemonDetails","offset","loadNumber","handleMoreClick","bind","this","event","newOffset","getNextOffset","setState","console","log","getMorePokemon","url","fetch","then","response","json","data","results","map","temp","push","catch","renderedPokemonList","index","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAeeA,G,MAbA,WACX,OACI,yBAAKC,UAAU,cACX,gCACI,0CACA,0EACA,uBAAGC,KAAK,uBAAR,uBACA,0DCQDC,EAfE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACf,OACI,yBAAKH,UAAU,2BAA2BI,MAAO,CAAC,SAAa,SAAUC,IAAKF,EAAQG,IACtF,yBAAKN,UAAU,eAAc,2BAAIG,EAAQI,OACzC,yBAAKP,UAAU,aACb,wBAAIA,UAAU,iCAAd,OAAmDG,EAAQG,IAC3D,wBAAIN,UAAU,iCAAd,WAAuDG,EAAQK,QAC/D,wBAAIR,UAAU,iCAAd,WAAuDG,EAAQM,QAC/D,yBAAKC,IAAKP,EAAQQ,QAAR,gBACV,yBAAKD,IAAKP,EAAQQ,QAAR,kBCsELC,E,YA1Eb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,SAAW,GACXC,eAAiB,GACjBC,OAAQ,EACRC,WAAY,IAEd,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBARX,E,6EAYZ,OAAOC,KAAKP,MAAMG,OAAOI,KAAKP,MAAMI,a,sCAGtBI,GAAQ,IAAD,OACfC,EAAYF,KAAKG,gBACvBH,KAAKI,SAAS,CAACR,OAAQM,IAAY,WACjCG,QAAQC,IAAI,WAAa,EAAKb,MAAMG,QACpC,EAAKW,sB,0CAMPP,KAAKO,mB,uCAGW,IAAD,OACXC,EAAM,4CAA8CR,KAAKP,MAAMG,OAAS,UAAYI,KAAKP,MAAMI,WACnGY,MAAMD,GACLE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACAA,IACF,EAAKT,SAAS,CAACV,SAAWmB,EAAKC,UAE/B,EAAKrB,MAAMC,SAASqB,KAAI,SAAAhC,GACtB0B,MAAM1B,EAAQyB,KACbE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,GAAIA,EAAM,CACR,IAAIG,EAAO,EAAKvB,MAAME,eACtBqB,EAAKC,KAAKJ,GACV,EAAKT,SAAS,CAACT,eAAgBqB,QAGlCE,MAAMb,QAAQC,YAIpBY,MAAMb,QAAQC,O,+BAGP,IAGFa,EAFmBnB,KAAKP,MAAvBE,eAEoCoB,KAAI,SAAChC,EAASqC,GACvD,OAAQ,kBAAC,EAAD,CAAUrC,QAASA,OAG7B,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKH,UAAU,aACb,yBAAKA,UAAU,gBACZuC,IAGL,4BAAQE,KAAK,SAASzC,UAAU,8BAA8BK,IAAI,cAAcC,GAAG,cAAcoC,QAAStB,KAAKF,iBAA/G,kB,GArEUyB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.25587f09.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"App-topbar\">\r\n            <center>\r\n                <h1>Pokédex</h1>\r\n                <h6>A React REST API demo using the PokéAPI</h6>\r\n                <a href=\"https://pokeapi.co/\">https://pokeapi.co/</a>\r\n                <h6>Francis Surroca - 2019</h6>\r\n            </center>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst PokeCard = ({pokemon}) => {\r\n    return (\r\n        <div className=\"card text-center mx-auto\" style={{\"maxWidth\" : \"18rem\"}} key={pokemon.id}>\r\n        <div className=\"card-header\"><b>{pokemon.name}</b></div>\r\n        <div className=\"card-body\">          \r\n          <h6 className=\"card-subtitle mb-2 text-muted\">Id: {pokemon.id}</h6>  \r\n          <h6 className=\"card-subtitle mb-2 text-muted\">Height: {pokemon.height}</h6>  \r\n          <h6 className=\"card-subtitle mb-2 text-muted\">Weight: {pokemon.weight}</h6>  \r\n          <img src={pokemon.sprites['front_default']} />\r\n          <img src={pokemon.sprites['back_default']} />                       \r\n        </div>\r\n      </div>\r\n    )\r\n};\r\n\r\nexport default PokeCard","import React from 'react';\r\nimport {Component} from 'react';\r\nimport \"./App.css\"\r\nimport Header from './components/Header'\r\nimport PokeCard from './components/PokeCard'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      pokemons : [],\r\n      pokemonDetails : [],\r\n      offset: 0,\r\n      loadNumber: 24      \r\n    }\r\n    this.handleMoreClick = this.handleMoreClick.bind(this);\r\n  }\r\n\r\n  getNextOffset() {\r\n    return this.state.offset+this.state.loadNumber;\r\n  }\r\n\r\n  handleMoreClick(event) {\r\n    const newOffset = this.getNextOffset();\r\n    this.setState({offset: newOffset}, () => {\r\n      console.log(\"Offset: \" + this.state.offset)\r\n      this.getMorePokemon();\r\n    });\r\n    \r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.getMorePokemon();\r\n  }\r\n\r\n  getMorePokemon() {\r\n    let url = \"https://pokeapi.co/api/v2/pokemon?offset=\" + this.state.offset + \"&limit=\" + this.state.loadNumber;\r\n    fetch(url)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if (data) {\r\n        this.setState({pokemons : data.results})\r\n\r\n        this.state.pokemons.map(pokemon => {\r\n          fetch(pokemon.url)\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            if (data) {\r\n              var temp = this.state.pokemonDetails\r\n              temp.push(data)\r\n              this.setState({pokemonDetails: temp})\r\n            }            \r\n          })\r\n          .catch(console.log)\r\n        })\r\n      }\r\n    })\r\n    .catch(console.log)\r\n  }\r\n\r\n  render() {\r\n    const {pokemonDetails} = this.state;\r\n\r\n    const renderedPokemonList = pokemonDetails.map((pokemon, index) => {\r\n      return (<PokeCard pokemon={pokemon} />);\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"container\">\r\n          <div className=\"card-columns\">\r\n            {renderedPokemonList}\r\n          </div>\r\n        </div>\r\n        <button type=\"button\" className=\"btn btn-secondary btn-block\" key=\"more-button\" id=\"more-button\" onClick={this.handleMoreClick}>Load More</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}